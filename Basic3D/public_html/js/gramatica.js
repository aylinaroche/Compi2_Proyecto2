/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,11],$V7=[1,10],$V8=[5,13,20,21,22,23,24,26,43],$V9=[1,27],$Va=[1,26],$Vb=[1,28],$Vc=[23,25,27,30,35],$Vd=[2,14],$Ve=[1,43],$Vf=[1,44],$Vg=[1,46],$Vh=[27,30,34],$Vi=[1,48],$Vj=[1,56],$Vk=[1,60],$Vl=[1,61],$Vm=[1,58],$Vn=[1,59],$Vo=[1,57],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,99],$Vu=[1,95],$Vv=[1,96],$Vw=[1,97],$Vx=[1,100],$Vy=[1,101],$Vz=[1,102],$VA=[1,103],$VB=[1,104],$VC=[1,105],$VD=[1,106],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,110],$VI=[1,111],$VJ=[1,112],$VK=[1,113],$VL=[1,114],$VM=[1,115],$VN=[1,116],$VO=[1,117],$VP=[5,13,14,18,20,21,22,23,24,26,38,43,53,54,55,56,59,63,64,65,67,68,69,70,71,72,74,76,77,79,80,82,83,84,85,86,90,91,92,117,118,119],$VQ=[1,121],$VR=[1,120],$VS=[1,119],$VT=[1,122],$VU=[1,123],$VV=[1,124],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[1,132],$V21=[1,133],$V31=[1,134],$V41=[1,135],$V51=[1,136],$V61=[15,25,30,34,67,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],$V71=[1,140],$V81=[1,141],$V91=[15,34],$Va1=[2,39],$Vb1=[15,27,29,34,35,42],$Vc1=[18,20,21,22,23,24,26,43,53,54,55,56,59,65,69,70,71,72,74,76,77,79,80,82,83,84,85,86,90,91,92],$Vd1=[1,171],$Ve1=[1,210],$Vf1=[1,223],$Vg1=[5,13,18,20,21,22,23,24,26,43,53,54,55,56,59,65,69,70,71,72,74,76,77,79,80,82,83,84,85,86,90,91,92],$Vh1=[18,20,21,22,23,24,26,30,43,53,54,55,56,59,65,69,70,71,72,74,76,77,79,80,82,83,84,85,86,90,91,92],$Vi1=[15,30,34,67,101],$Vj1=[15,25,30,34,67,101,102],$Vk1=[15,25,30,34,67,101,102,103,105,106,107,108,109,110,111],$Vl1=[15,25,30,34,67,101,102,103,105,106,107,108,109,110,111,112,113],$Vm1=[15,25,30,34,67,101,102,103,105,106,107,108,109,110,111,112,113,114,115],$Vn1=[15,25,30,34,39,42,67,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],$Vo1=[14,18,20,21,22,23,24,26,38,43,53,54,55,56,59,63,64,65,67,68,69,70,71,72,74,76,77,79,80,82,83,84,85,86,90,91,92,117,118,119],$Vp1=[1,326],$Vq1=[1,327],$Vr1=[1,328],$Vs1=[1,388],$Vt1=[1,387],$Vu1=[27,67],$Vv1=[18,65,69];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTRADA":4,"EOF":5,"INSTRUCCIONES":6,"ELEMENTO":7,"VARIABLE":8,"PRINCIPAL":9,"CASTEO":10,"METODO":11,"FUNCIONES":12,"Principal":13,"(":14,")":15,"{":16,"INSTRUCCION":17,"}":18,"TIPO":19,"boool":20,"num":21,"str":22,"id":23,"vacio":24,"*":25,"arreglo":26,":":27,"DIMEN":28,"of":29,";":30,"MasVARIABLE":31,"ASIGNAR":32,"OP":33,",":34,"[":35,"DIM":36,"]":37,"numero":38,".":39,"ASIGNACION":40,"ACCESO":41,"=":42,"element":43,"PARAMETRO":44,"INST":45,"SI":46,"SWITCH":47,"CICLO":48,"FOR":49,"OTROS":50,"INSTANCIA":51,"THROW":52,"romper":53,"continuar":54,"retornar":55,"si":56,"entonces":57,"sino":58,"interruptor":59,"MODO":60,"CASO":61,"DEFECTO":62,"verdadero":63,"falso":64,"caso":65,"PUNTUAL":66,"-":67,"cadena":68,"defecto":69,"mientras":70,"hacer":71,"repetir":72,"hasta":73,"looop":74,"mientrasX":75,"para":76,"count":77,"VALOR":78,"getBool":79,"getNum":80,"BASE":81,"outStr":82,"outNum":83,"inStr":84,"inNum":85,"show":86,"bin":87,"hex":88,"dec":89,"getRandom":90,"getLength":91,"lanzar":92,"EXCEPCION":93,"NullException":94,"MissingException":95,"AritmeticException":96,"StackException":97,"HeapException":98,"PoolException":99,"E":100,"+":101,"/":102,"^":103,"!":104,"%":105,">=":106,"<=":107,"==":108,"!=":109,">":110,"<":111,"||":112,"|&":113,"&&":114,"&?":115,"|?":116,"cadenaSimple":117,"nulo":118,"create":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"Principal",14:"(",15:")",16:"{",18:"}",20:"boool",21:"num",22:"str",23:"id",24:"vacio",25:"*",26:"arreglo",27:":",29:"of",30:";",34:",",35:"[",37:"]",38:"numero",39:".",42:"=",43:"element",53:"romper",54:"continuar",55:"retornar",56:"si",57:"entonces",58:"sino",59:"interruptor",63:"verdadero",64:"falso",65:"caso",67:"-",68:"cadena",69:"defecto",70:"mientras",71:"hacer",72:"repetir",73:"hasta",74:"looop",75:"mientrasX",76:"para",77:"count",79:"getBool",80:"getNum",82:"outStr",83:"outNum",84:"inStr",85:"inNum",86:"show",87:"bin",88:"hex",89:"dec",90:"getRandom",91:"getLength",92:"lanzar",94:"NullException",95:"MissingException",96:"AritmeticException",97:"StackException",98:"HeapException",99:"PoolException",101:"+",102:"/",103:"^",104:"!",105:"%",106:">=",107:"<=",108:"==",109:"!=",110:">",111:"<",112:"||",113:"|&",114:"&&",115:"&?",116:"|?",117:"cadenaSimple",118:"nulo",119:"create"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,6],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[8,7],[8,4],[32,2],[32,0],[31,3],[31,1],[28,4],[28,3],[36,4],[36,1],[40,5],[40,5],[40,4],[41,3],[41,2],[7,6],[11,9],[11,10],[44,4],[44,5],[44,2],[44,3],[44,0],[17,2],[17,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,2],[45,1],[45,2],[45,3],[45,2],[45,2],[45,3],[46,8],[46,12],[47,9],[47,10],[60,1],[60,1],[61,5],[61,4],[61,7],[61,6],[66,1],[66,1],[62,3],[48,7],[48,8],[48,8],[48,5],[48,10],[49,10],[49,10],[49,7],[51,4],[78,3],[78,1],[78,0],[10,7],[10,13],[10,7],[10,10],[10,9],[10,10],[10,7],[81,1],[81,1],[81,1],[12,5],[12,9],[12,7],[50,2],[50,4],[50,8],[50,4],[50,6],[50,6],[50,6],[50,4],[50,3],[50,6],[50,4],[52,5],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[33,1],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,2],[100,2],[100,2],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,3],[100,1],[100,1],[100,3],[100,3],[100,2],[100,1],[100,1],[100,1],[100,1],[100,1],[100,4],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	parser.arbol.raiz = $$[$0-1];

break;
case 2:

		nodo  = new Nodo("ENTRADA",null,null,[$$[$0-1],$$[$0]]);
		this.$ = nodo;
	
break;
case 3:

		nodo  = new Nodo("ENTRADA",null,null,[$$[$0]]);
		this.$ = nodo;
	
break;
case 4: case 5: case 6: case 7: case 8: case 9:

		nodo  = new Nodo("INSTRUCCIONES",null,null,[$$[$0]]);
		this.$ = nodo;
	
break;
case 10:
 //2
		nodo  = new Nodo("PRINCIPAL",null,null,[$$[$0-5],$$[$0-1]]);
		this.$ = nodo;
	
break;
case 11:
 //1
		nodo1 = new Nodo('boool',$$[$0],_$[$0],[]);
		nodo  = new Nodo("TIPO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 12:
 //1
		nodo1 = new Nodo('num',$$[$0],_$[$0],[]);
		nodo  = new Nodo("TIPO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 13:
 //1
		nodo1 = new Nodo('str',$$[$0],_$[$0],[]);
		nodo  = new Nodo("TIPO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 14:
 //1
		nodo1 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("TIPO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 15:
 //1
		nodo1 = new Nodo('vacio',$$[$0],_$[$0],[]);
		nodo  = new Nodo("TIPO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 16:
 //2
		nodo1 = new Nodo('*',$$[$0],_$[$0],[]);
		nodo  = new Nodo("TIPO",null,null,[$$[$0-1],nodo1]);
		this.$ = nodo;
	
break;
case 17:
 //6
		nodo1 = new Nodo('arreglo',$$[$0-6],_$[$0-6],[]);
		nodo2 = new Nodo(':',$$[$0-5],_$[$0-5],[]);
		nodo3 = new Nodo('id',$$[$0-4],_$[$0-4],[]);
		nodo4 = new Nodo('of',$$[$0-2],_$[$0-2],[]);
		nodo  = new Nodo("VARIABLE",null,null,[nodo1,nodo2,nodo3,$$[$0-3],nodo4,$$[$0-1]]);
		this.$ = nodo;
	
break;
case 18:
 //3
		nodo  = new Nodo("VARIABLE",null,null,[$$[$0-3],$$[$0-2],$$[$0-1]]);
		this.$ = nodo;
	
break;
case 19:
 //2
		nodo1 = new Nodo(':',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("ASIGNAR",null,null,[nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 20:
 //1
		nodo1 = new Nodo('nulo',null,null,[]);
		nodo  = new Nodo("ASIGNAR",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 21:
 //3
		nodo1 = new Nodo(',',$$[$0-1],_$[$0-1],[]);
		nodo2 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("MasVARIABLE",null,null,[$$[$0-2],nodo1,nodo2]);
		this.$ = nodo;
	
break;
case 22:
 //1
		nodo1 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("MasVARIABLE",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 23:
 //4
		nodo1 = new Nodo('[',$$[$0-2],_$[$0-2],[]);
		nodo2 = new Nodo(']',$$[$0],_$[$0],[]);
		nodo  = new Nodo("DIMEN",null,null,[$$[$0-3],nodo1,$$[$0-1],nodo2]);
		this.$ = nodo;
	
break;
case 24:
 //3
		nodo1 = new Nodo('[',$$[$0-2],_$[$0-2],[]);
		nodo2 = new Nodo(']',$$[$0],_$[$0],[]);
		nodo  = new Nodo("DIMEN",null,null,[nodo1,$$[$0-1],nodo2]);
		this.$ = nodo;
	
break;
case 25:
 //3
		nodo1 = new Nodo('numero',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('.',$$[$0-1],_$[$0-1],[]);
		nodo3 = new Nodo('numero',$$[$0],_$[$0],[]);
		nodo  = new Nodo("DIM",null,null,[nodo1,nodo2,nodo3]);
		this.$ = nodo;
	
break;
case 26:
 //1
		nodo1 = new Nodo('numero',$$[$0],_$[$0],[]);
		nodo  = new Nodo("DIM",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 27: case 28:
 //4
		nodo1 = new Nodo('id',$$[$0-4],_$[$0-4],[]);
		nodo2 = new Nodo('=',$$[$0-2],_$[$0-2],[]);
		nodo  = new Nodo("ASIGNACION",null,null,[nodo1,$$[$0-3],nodo2,$$[$0-1]]);
		this.$ = nodo;
	
break;
case 29:
 //3
		nodo1 = new Nodo('id',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('=',$$[$0-2],_$[$0-2],[]);
		nodo  = new Nodo("ASIGNACION",null,null,[nodo1,nodo2,$$[$0-1]]);
		this.$ = nodo;
	
break;
case 30:

		nodo1 = new Nodo('.',$$[$0-1],_$[$0-1],[]);
		nodo2 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("ACCESO",null,null,[$$[$0-2],nodo1,nodo2]);
		this.$ = nodo;
	
break;
case 31:

		nodo1 = new Nodo('.',$$[$0-1],_$[$0-1],[]);
		nodo2 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("ACCESO",null,null,[nodo1,nodo2]);
		this.$ = nodo;
	
break;
case 32:

		nodo0 = new Nodo('element',$$[$0-5],_$[$0-5],[]);
		nodo1 = new Nodo(':',$$[$0-4],_$[$0-4],[]);
		nodo2 = new Nodo('id',$$[$0-3],_$[$0-3],[]);
		nodo3 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo4 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("ELEMENTO",null,null,[nodo0,nodo1,nodo2,nodo3,$$[$0-1],nodo4]);
		this.$ = nodo;
	
break;
case 33:
 //9
		nodo1 = new Nodo(':',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('id',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo('(',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo(')',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo6 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("METODO",null,null,[$$[$0-8],nodo1,nodo2,nodo3,$$[$0-4],nodo4,nodo5,$$[$0-1],nodo6]);
		this.$ = nodo;
	
break;
case 34:

		nodo1 = new Nodo(':',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('id',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo('(',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo(')',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo6 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("METODO",null,null,[$$[$0-9],$$[$0-8],nodo1,nodo2,nodo3,$$[$0-4],nodo4,nodo5,$$[$0-1],nodo6]);
		this.$ = nodo;
	
break;
case 35:

		nodo1 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo2 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("PARAMETRO",null,null,[$$[$0-3],nodo1,$$[$0-1],nodo2]);
		this.$ = nodo;
	
break;
case 36:

		nodo1 = new Nodo(',',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('id',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("PARAMETRO",null,null,[$$[$0-4],nodo1,$$[$0-2],nodo2,$$[$0]]);
		this.$ = nodo;
	
break;
case 37:

		nodo2 = new Nodo('id',$$[$0],_$[$0],[]);
		nodo  = new Nodo("PARAMETRO",null,null,[$$[$0-1],nodo2]);
		this.$ = nodo;
	
break;
case 38:

		nodo2 = new Nodo('id',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("PARAMETRO",null,null,[$$[$0-2],nodo2,$$[$0]]);
		this.$ = nodo;
	
break;
case 39:

		nodo2 = new Nodo('nulo',null,null,[]);
		nodo  = new Nodo("PARAMETRO",null,null,[nodo2]);
		this.$ = nodo;
	
break;
case 40:

		nodo  = new Nodo("INSTRUCCION",null,null,[$$[$0-1],$$[$0]]);
		this.$ = nodo;
	
break;
case 41:

		nodo  = new Nodo("INSTRUCCION",null,null,[$$[$0]]);
		this.$ = nodo;
	
break;
case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 52:

		nodo  = new Nodo("INST",null,null,[$$[$0]]);
		this.$ = nodo;
	
break;
case 51:

		nodo  = new Nodo("INST",null,null,[$$[$0-1]]);
		this.$ = nodo;
	
break;
case 53:

		nodo1 = new Nodo('romper',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("INST",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 54:

		nodo1 = new Nodo('romper',$$[$0-2],_$[$0-2],[]);
		nodo  = new Nodo("INST",null,null,[nodo1,$$[$0-1]]);
		this.$ = nodo;
	
break;
case 55:

		nodo1 = new Nodo('continuar',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("INST",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 56:

		nodo1 = new Nodo('retornar',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("INST",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 57:

		nodo1 = new Nodo('retornar',$$[$0-2],_$[$0-2],[]);
		nodo  = new Nodo("INST",null,null,[nodo1,$$[$0-1]]);
		this.$ = nodo;
	
break;
case 58:

		nodo1 = new Nodo('si',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('(',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo(')',$$[$0-4],_$[$0-4],[]);
		nodo4 = new Nodo('entonces',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo6 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("SI",null,null,[nodo1,nodo2,$$[$0-5],nodo3,nodo4,nodo5,$$[$0-1],nodo6]);
		this.$ = nodo;
	
break;
case 59:

		nodo1 = new Nodo('si',$$[$0-11],_$[$0-11],[]);
		nodo2 = new Nodo('(',$$[$0-10],_$[$0-10],[]);
		nodo3 = new Nodo(')',$$[$0-8],_$[$0-8],[]);
		nodo4 = new Nodo('entonces',$$[$0-7],_$[$0-7],[]);
		nodo5 = new Nodo('{',$$[$0-6],_$[$0-6],[]);
		nodo6 = new Nodo('}',$$[$0-4],_$[$0-4],[]);
		nodo7 = new Nodo('sino',$$[$0-3],_$[$0-3],[]);
		nodo8 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo9 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("SI",null,null,[nodo1,nodo2,$$[$0-9],nodo3,nodo4,nodo5,$$[$0-5],nodo6,nodo7,nodo8,$$[$0-1],nodo9]);
		this.$ = nodo;
	
break;
case 60:

		nodo1 = new Nodo('interruptor',$$[$0-8],_$[$0-8],[]);
		nodo2 = new Nodo('(',$$[$0-7],_$[$0-7],[]);
		nodo3 = new Nodo(',',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo(')',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo7 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("SWITCH",null,null,[nodo1,nodo2,$$[$0-6],nodo3,$$[$0-4],nodo4,nodo5,$$[$0-1],nodo7]);
		this.$ = nodo;
	
break;
case 61:

		nodo1 = new Nodo('interruptor',$$[$0-9],_$[$0-9],[]);
		nodo2 = new Nodo('(',$$[$0-8],_$[$0-8],[]);
		nodo3 = new Nodo(',',$$[$0-6],_$[$0-6],[]);
		nodo4 = new Nodo(')',$$[$0-4],_$[$0-4],[]);
		nodo5 = new Nodo('{',$$[$0-3],_$[$0-3],[]);
		nodo7 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("SWITCH",null,null,[nodo1,nodo2,$$[$0-7],nodo3,$$[$0-5],nodo4,nodo5,$$[$0-2],$$[$0-1],nodo7]);
		this.$ = nodo;
	
break;
case 62:

		nodo1 = new Nodo('verdadero',$$[$0],_$[$0],[]);
		nodo  = new Nodo("MODO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 63:

		nodo1 = new Nodo('falso',$$[$0],_$[$0],[]);
		nodo  = new Nodo("MODO",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 64:

		nodo1 = new Nodo('caso',$$[$0-3],_$[$0-3],[]);
		nodo4 = new Nodo(':',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("CASO",null,null,[$$[$0-4],nodo1,$$[$0-2],nodo4,$$[$0]]);
		this.$ = nodo;
	
break;
case 65:

		nodo1 = new Nodo('caso',$$[$0-3],_$[$0-3],[]);
		nodo4 = new Nodo(':',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("CASO",null,null,[nodo1,$$[$0-2],nodo4,$$[$0]]);
		this.$ = nodo;
	
break;
case 66:

		nodo1 = new Nodo('caso',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('-',$$[$0-3],_$[$0-3],[]);
		nodo4 = new Nodo(':',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("CASO",null,null,[$$[$0-6],nodo1,$$[$0-4],nodo2,$$[$0-2],nodo4,$$[$0]]);
		this.$ = nodo;
	
break;
case 67:

		nodo1 = new Nodo('caso',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('-',$$[$0-3],_$[$0-3],[]);
		nodo4 = new Nodo(':',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("CASO",null,null,[nodo1,$$[$0-4],nodo2,$$[$0-2],nodo4,$$[$0]]);
		this.$ = nodo;
	
break;
case 68:

		nodo1 = new Nodo('cadena',$$[$0],_$[$0],[]);
		nodo  = new Nodo("PUNTUAL",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 69:

		nodo1 = new Nodo('numero',$$[$0],_$[$0],[]);
		nodo  = new Nodo("PUNTUAL",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 70:

		nodo1 = new Nodo('defecto',$$[$0-2],_$[$0-2],[]);
		nodo2 = new Nodo(':',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("DEFECTO",null,null,[nodo1,nodo2,$$[$0]]);
		this.$ = nodo;
	
break;
case 71:

		nodo1 = new Nodo('mientras',$$[$0-6],_$[$0-6],[]);
		nodo2 = new Nodo('(',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo(')',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo6 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("CICLO",null,null,[nodo1,nodo2,$$[$0-4],nodo4,nodo5,$$[$0-1],nodo6]);
		this.$ = nodo;
	
break;
case 72:

		nodo1 = new Nodo('hacer',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('{',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo('}',$$[$0-4],_$[$0-4],[]);
		nodo4 = new Nodo('mientras',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo7 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("CICLO",null,null,[nodo1,nodo2,$$[$0-5],nodo3,nodo4,nodo5,$$[$0-1],nodo7]);
		this.$ = nodo;
	
break;
case 73:

		nodo1 = new Nodo('repetir',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('{',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo('}',$$[$0-4],_$[$0-4],[]);
		nodo4 = new Nodo('hasta',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo7 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("CICLO",null,null,[nodo1,nodo2,$$[$0-5],nodo3,nodo4,nodo5,$$[$0-1],nodo7]);
		this.$ = nodo;
	
break;
case 74:

		nodo1 = new Nodo('loop',$$[$0-4],_$[$0-4],[]);
		nodo2 = new Nodo('id',$$[$0-3],_$[$0-3],[]);
		nodo3 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo4 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("CICLO",null,null,[nodo1,nodo2,nodo3,$$[$0-1],nodo4]);
		this.$ = nodo;
	
break;
case 75:

		nodo1 = new Nodo('hacer',$$[$0-9],_$[$0-9],[]);
		nodo2 = new Nodo('{',$$[$0-8],_$[$0-8],[]);
		nodo3 = new Nodo('}',$$[$0-6],_$[$0-6],[]);
		nodo4 = new Nodo('mientrasX',$$[$0-5],_$[$0-5],[]);
		nodo5 = new Nodo('(',$$[$0-4],_$[$0-4],[]);
		nodo6 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo7 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("CICLO",null,null,[nodo1,nodo2,$$[$0-7],nodo3,nodo4,nodo5,$$[$0-3],nodo6,$$[$0-1],nodo7]);
		this.$ = nodo;
	
break;
case 76: case 77:

		nodo1 = new Nodo('para',$$[$0-9],_$[$0-9],[]);
		nodo2 = new Nodo('(',$$[$0-8],_$[$0-8],[]);
		nodo3 = new Nodo(';',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo(')',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo6 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("FOR",null,null,[nodo1,nodo2,$$[$0-7],$$[$0-6],nodo3,$$[$0-4],nodo4,nodo5,$$[$0-1],nodo6]);
		this.$ = nodo;
	
break;
case 78:

		nodo1 = new Nodo('count',$$[$0-6],_$[$0-6],[]);
		nodo2 = new Nodo('(',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo(')',$$[$0-3],_$[$0-3],[]);
		nodo5 = new Nodo('{',$$[$0-2],_$[$0-2],[]);
		nodo6 = new Nodo('}',$$[$0],_$[$0],[]);
		nodo  = new Nodo("FOR",null,null,[nodo1,nodo2,$$[$0-4],nodo4,nodo5,$$[$0-1],nodo6]);
		this.$ = nodo;
	
break;
case 79:

		nodo1 = new Nodo('id',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo3 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("INSTANCIA",null,null,[nodo1,nodo2,$$[$0-1],nodo3]);
		this.$ = nodo;
	
break;
case 80:

		nodo1 = new Nodo(',',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("VALOR",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 81:

		nodo  = new Nodo("VALOR",null,null,[$$[$0]]);
		this.$ = nodo;
	
break;
case 82:

		nodo1 = new Nodo('nulo',null,null,[]);
		nodo  = new Nodo("VALOR",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 90:

		nodo1 = new Nodo('bin',$$[$0],_$[$0],[]);
		nodo  = new Nodo("BASE",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 91:

		nodo1 = new Nodo('hex',$$[$0],_$[$0],[]);
		nodo  = new Nodo("BASE",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 92:

		nodo1 = new Nodo('dec',$$[$0],_$[$0],[]);
		nodo  = new Nodo("BASE",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 93:

		nodo1 = new Nodo(':',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('getRandom',$$[$0-2],_$[$0-2],[]);
		nodo3 = new Nodo('(',$$[$0-1],_$[$0-1],[]);
		nodo4 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[$$[$0-4],nodo1,nodo2,nodo3,nodo4]);
		this.$ = nodo;
	
break;
case 94:

		nodo1 = new Nodo(':',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('getLength',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo('(',$$[$0-5],_$[$0-5],[]);
		nodo4 = new Nodo('id',$$[$0-4],_$[$0-4],[]);
		nodo5 = new Nodo(',',$$[$0-3],_$[$0-3],[]);
		nodo6 = new Nodo('num',$$[$0-2],_$[$0-2],[]);
		nodo7 = new Nodo('numero',$$[$0-1],_$[$0-1],[]);
		nodo8 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[$$[$0-8],nodo1,nodo2,nodo3,nodo4,nodo5,nodo6,nodo7,nodo8]);
		this.$ = nodo;
	
break;
case 95:

		nodo1 = new Nodo(':',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('getLength',$$[$0-4],_$[$0-4],[]);
		nodo3 = new Nodo('(',$$[$0-3],_$[$0-3],[]);
		nodo4 = new Nodo('str',$$[$0-2],_$[$0-2],[]);
		nodo5 = new Nodo('id',$$[$0-1],_$[$0-1],[]);
		nodo6 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[$$[$0-6],nodo1,nodo2,nodo3,nodo4,nodo5,nodo6]);
		this.$ = nodo;
	
break;
case 96:

		nodo  = new Nodo("OTROS",null,null,[$$[$0-1]]);
		this.$ = nodo;
	
break;
case 97:

		nodo1 = new Nodo('getBool',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo5 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-1],nodo5]);
		this.$ = nodo;
	
break;
case 98:

		nodo1 = new Nodo('getNum',$$[$0-7],_$[$0-7],[]);
		nodo2 = new Nodo('(',$$[$0-6],_$[$0-6],[]);
		nodo3 = new Nodo(',',$$[$0-4],_$[$0-4],[]);
		nodo4 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo5 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-5],nodo3,$$[$0-3],nodo4,$$[$0-1],nodo5]);
		this.$ = nodo;
	
break;
case 99:

		nodo1 = new Nodo('outStr',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo5 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-1],nodo5]);
		this.$ = nodo;
	
break;
case 100:

		nodo1 = new Nodo('outNum',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('(',$$[$0-4],_$[$0-4],[]);
		nodo3 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo4 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-3],nodo3,$$[$0-1],nodo4]);
		this.$ = nodo;
	
break;
case 101:

		nodo1 = new Nodo('inStr',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('(',$$[$0-4],_$[$0-4],[]);
		nodo3 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo4 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-3],nodo3,$$[$0-1],nodo4]);
		this.$ = nodo;
	
break;
case 102:

		nodo1 = new Nodo('inNum',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('(',$$[$0-4],_$[$0-4],[]);
		nodo3 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo4 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-3],nodo3,$$[$0-1],nodo4]);
		this.$ = nodo;
	
break;
case 103:

		nodo1 = new Nodo('getNum',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo5 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-1],nodo5]);
		this.$ = nodo;
	
break;
case 104:

		nodo1 = new Nodo('getRandom',$$[$0-2],_$[$0-2],[]);
		nodo2 = new Nodo('(',$$[$0-1],_$[$0-1],[]);
		nodo5 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,nodo5]);
		this.$ = nodo;
	
break;
case 105:

		nodo1 = new Nodo('getLength',$$[$0-5],_$[$0-5],[]);
		nodo2 = new Nodo('(',$$[$0-4],_$[$0-4],[]);
		nodo3 = new Nodo(',',$$[$0-2],_$[$0-2],[]);
		nodo4 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-3],nodo3,$$[$0-1],nodo4]);
		this.$ = nodo;
	
break;
case 106:

		nodo1 = new Nodo('getLength',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo3 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("OTROS",null,null,[nodo1,nodo2,$$[$0-1],nodo3]);
		this.$ = nodo;
	
break;
case 107:

		nodo1 = new Nodo('lanzar',$$[$0-4],_$[$0-4],[]);
		nodo2 = new Nodo('(',$$[$0-3],_$[$0-3],[]);
		nodo3 = new Nodo(')',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("THROW",null,null,[nodo1,nodo2,$$[$0-2],nodo3]);
		this.$ = nodo;
	
break;
case 108:

		nodo1 = new Nodo('Null',$$[$0],_$[$0],[]);
		nodo  = new Nodo("EXCEPCION",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 109:

		nodo1 = new Nodo('Missing',$$[$0],_$[$0],[]);
		nodo  = new Nodo("EXCEPCION",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 110:

		nodo1 = new Nodo('Aritmetic',$$[$0],_$[$0],[]);
		nodo  = new Nodo("EXCEPCION",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 111:

		nodo1 = new Nodo('Stack',$$[$0],_$[$0],[]);
		nodo  = new Nodo("EXCEPCION",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 112:

		nodo1 = new Nodo('Heap',$$[$0],_$[$0],[]);
		nodo  = new Nodo("EXCEPCION",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 113:

		nodo1 = new Nodo('Pool',$$[$0],_$[$0],[]);
		nodo  = new Nodo("EXCEPCION",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 114:
 
		nodo  = new Nodo("OP",null,null,[$$[$0]]);
		this.$ = nodo;
		//console.log("Expresion"); 
	
break;
case 115:

		nodo1 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo2 = new Nodo(')',$$[$0],_$[$0],[]);
		nodo  = new Nodo("E",null,null,[nodo1,$$[$0-2],nodo2]);
		this.$ = nodo;
	
break;
case 116:

		nodo1 = new Nodo('+',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 117:

		nodo1 = new Nodo('-',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 118:

		nodo1 = new Nodo('*',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 119:

		nodo1 = new Nodo('/',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 120:

		nodo1 = new Nodo('^',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 121:

		nodo1 = new Nodo('!',$$[$0],_$[$0],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-1],nodo1]);
		this.$ = nodo;
	
break;
case 122:

		nodo1 = new Nodo('%',$$[$0],_$[$0],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-1],nodo1]);
		this.$ = nodo;
	
break;
case 123:

		nodo1 = new Nodo('-',$$[$0],_$[$0],[]);
		nodo  = new Nodo("E",null,null,[nodo1,$$[$0-1]]);
		this.$ = nodo;
	
break;
case 124:

		nodo1 = new Nodo('>=',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 125:

		nodo1 = new Nodo('<=',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 126:

		nodo1 = new Nodo('==',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 127:

		nodo1 = new Nodo('!=',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 128:

		nodo1 = new Nodo('>',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 129:

		nodo1 = new Nodo('<',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 130:

		nodo1 = new Nodo('||',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 131:

		nodo1 = new Nodo('|&',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 132:

		nodo1 = new Nodo('&&',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 133:

		nodo1 = new Nodo('&?',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 134:

		nodo1 = new Nodo('|?',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 135:

		nodo1 = new Nodo("verdadero",$$[$0],_$[$0],[]);
		nodo	= new Nodo("E",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 136:

		nodo1 = new Nodo("falso",$$[$0],_$[$0],[]);
		nodo	= new Nodo("E",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 137:

		nodo1 = new Nodo('+',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,nodo1]);
		this.$ = nodo;
	
break;
case 138:

		nodo1 = new Nodo('-',$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[$$[$0-2],nodo1,nodo1]);
		this.$ = nodo;
	
break;
case 139:

		nodo1 = new Nodo("id",$$[$0-1],_$[$0-1],[]);
		nodo  = new Nodo("E",null,null,[nodo1,$$[$0]]);
		this.$ = nodo;
	
break;
case 140:

		nodo1 = new Nodo("numero",$$[$0],_$[$0],[]);
		nodo	= new Nodo("E",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 141:

		nodo1 = new Nodo("id",$$[$0],_$[$0],[]);
		nodo	= new Nodo("E",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 142:

		nodo1 = new Nodo("cadena",$$[$0],_$[$0],[]);
		nodo	= new Nodo("E",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 143:

		nodo1 = new Nodo("id",$$[$0],_$[$0],[]);
		nodo	= new Nodo("cadenaSimple",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 144:

		nodo1 = new Nodo("nulo",$$[$0],_$[$0],[]);
		nodo	= new Nodo("E",null,null,[nodo1]);
		this.$ = nodo;
	
break;
case 145:

		nodo1 = new Nodo('create',$$[$0-3],_$[$0-3],[]);
		nodo2 = new Nodo('(',$$[$0-2],_$[$0-2],[]);
		nodo3 = new Nodo('id',$$[$0-1],_$[$0-1],[]);
		nodo4 = new Nodo(")",$$[$0],_$[$0],[]);
		nodo  = new Nodo("E",null,null,[nodo1,nodo2,nodo3,nodo4]);
		this.$ = nodo;
	
break;
case 146:

		nodo	= new Nodo("E",null,null,[$$[$0]]);
		this.$ = nodo;
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,19:12,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,26:$V6,43:$V7},{1:[3]},{5:[1,19],6:20,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,19:12,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,26:$V6,43:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),{27:[1,21]},{27:[1,22]},{23:$V9,25:$Va,27:[1,24],28:25,31:23,35:$Vb},{14:[1,29]},o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,$Vd),o($Vc,[2,15]),{1:[2,1]},o($V8,[2,2]),{23:[1,30]},{23:[1,31]},{27:[1,34],30:[2,20],32:32,34:[1,33]},{23:[1,42],79:[1,35],80:[1,36],82:[1,37],83:[1,38],84:[1,39],85:[1,40],86:[1,41],90:$Ve,91:$Vf},{27:[1,45],35:$Vg},o($Vc,[2,16]),o($Vh,[2,22]),{36:47,38:$Vi},{15:[1,49]},{16:[1,50]},{28:51,35:$Vb},{30:[1,52]},{23:[1,53]},{14:$Vj,23:$Vk,33:54,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:[1,67]},{14:[1,68]},{14:[1,69]},{14:[1,70]},{14:[1,71]},{14:[1,72]},{14:[1,73]},{14:[1,74]},{14:[1,75]},{14:[1,76]},{23:[1,77]},{36:78,38:$Vi},{37:[1,79]},{37:[2,26],39:[1,80]},{16:[1,81]},{7:86,8:84,12:91,17:82,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{29:[1,118],35:$Vg},o($VP,[2,18]),o($Vh,[2,21]),{30:[2,19]},o([15,30,34],[2,114],{25:$VQ,67:$VR,101:$VS,102:$VT,103:$VU,104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:137,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:138,117:$Vq,118:$Vr,119:$Vs},o($V61,[2,135]),o($V61,[2,136]),o($V61,[2,141],{41:139,14:$V71,39:$V81}),o($V61,[2,140]),o($V61,[2,142]),o($V61,[2,143]),o($V61,[2,144]),{14:[1,142]},o($V61,[2,146]),{22:[1,143]},{22:[1,144]},{22:[1,145]},{21:[1,146]},{23:[1,147]},{22:[1,148]},{22:[1,149]},o($V91,$Va1,{44:150,19:151,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5}),{15:[1,152]},{22:[1,154],23:[1,153]},{14:[1,155]},{37:[1,156]},o($Vb1,[2,24]),{39:[1,157]},{7:86,8:84,12:91,17:158,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,18:[1,159],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vc1,[2,41]),o($Vc1,[2,42]),o($Vc1,[2,43]),o($Vc1,[2,44]),o($Vc1,[2,45]),o($Vc1,[2,46]),o($Vc1,[2,47]),o($Vc1,[2,48]),o($Vc1,[2,49]),o($Vc1,[2,50],{30:[1,161]}),{30:[1,162]},o($Vc1,[2,52]),{14:$Vj,23:$Vk,30:[1,163],33:164,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{30:[1,165]},{14:$Vj,23:$Vk,30:[1,166],33:167,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{23:$V9,25:$Va,27:[1,168],31:23},o([23,25,27],$Vd,{41:169,28:170,14:$V71,35:$Vb,39:$V81,42:$Vd1}),{14:[1,172]},{14:[1,173]},{14:[1,174]},{16:[1,175]},{16:[1,176]},{23:[1,177]},{14:[1,178]},{14:[1,179]},{14:[1,180]},{14:[1,181]},{14:[1,182]},{14:[1,183]},{14:[1,184]},{14:[1,185]},{14:[1,186]},{14:[1,187]},{14:[1,188]},{14:[1,189]},{19:190,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:191,101:[1,192],117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:[1,194],68:$Vp,100:193,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:195,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:196,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:197,117:$Vq,118:$Vr,119:$Vs},o($V61,[2,121]),o($V61,[2,122]),{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:198,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:199,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:200,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:201,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:202,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:203,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:204,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:205,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:206,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:207,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:208,117:$Vq,118:$Vr,119:$Vs},{15:[1,209],25:$VQ,67:$VR,101:$VS,102:$VT,103:$VU,104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51},o([15,25,30,34,67,101,102,103,105],[2,123],{104:$VV,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($V61,[2,139],{39:$Ve1}),o($V91,[2,82],{100:55,51:66,78:211,33:212,14:$Vj,23:$Vk,38:$Vl,63:$Vm,64:$Vn,67:$Vo,68:$Vp,117:$Vq,118:$Vr,119:$Vs}),{23:[1,213]},{23:[1,214]},{23:[1,215]},{23:[1,216]},{23:[1,217]},{23:[1,218]},{34:[1,219]},{23:[1,220]},{23:[1,221]},{15:[1,222],34:$Vf1},{23:[1,224],25:$Va},o($Vg1,[2,93]),{34:[1,225]},{23:[1,226]},o($V91,$Va1,{19:151,44:227,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5}),o($Vb1,[2,23]),{38:[1,228]},{7:86,8:84,12:91,18:[1,229],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vg1,[2,32]),o($Vc1,[2,40]),o($Vh1,[2,96]),o($Vc1,[2,51]),o($Vc1,[2,53]),{30:[1,230]},o($Vc1,[2,55]),o($Vc1,[2,56]),{30:[1,231]},{90:$Ve,91:$Vf},{39:$Ve1,42:[1,232]},{35:$Vg,42:[1,233]},{14:$Vj,23:$Vk,33:234,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:235,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:236,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:237,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{7:86,8:84,12:91,17:238,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:239,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{16:[1,240]},{8:242,19:244,20:$V1,21:$V2,22:$V3,23:[1,243],24:$V5,26:$V6,40:241},{14:$Vj,23:$Vk,33:245,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:246,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:247,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:248,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:249,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:250,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:251,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:252,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{15:[1,253]},{14:$Vj,23:$Vk,33:254,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{93:255,94:[1,256],95:[1,257],96:[1,258],97:[1,259],98:[1,260],99:[1,261]},{25:$Va,30:[1,262]},o($Vi1,[2,116],{25:$VQ,102:$VT,103:$VU,104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($V61,[2,137]),o($Vi1,[2,117],{25:$VQ,102:$VT,103:$VU,104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($V61,[2,138],{51:66,100:138,14:$Vj,23:$Vk,38:$Vl,63:$Vm,64:$Vn,68:$Vp,117:$Vq,118:$Vr,119:$Vs}),o($Vj1,[2,118],{103:$VU,104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vj1,[2,119],{103:$VU,104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o([15,25,30,34,67,101,102,103],[2,120],{104:$VV,105:$VW,106:$VX,107:$VY,108:$VZ,109:$V_,110:$V$,111:$V01,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vk1,[2,124],{104:$VV,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vk1,[2,125],{104:$VV,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vk1,[2,126],{104:$VV,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vk1,[2,127],{104:$VV,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vk1,[2,128],{104:$VV,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vk1,[2,129],{104:$VV,112:$V11,113:$V21,114:$V31,115:$V41,116:$V51}),o($Vl1,[2,130],{104:$VV,114:$V31,115:$V41,116:$V51}),o($Vl1,[2,131],{104:$VV,114:$V31,115:$V41,116:$V51}),o($Vm1,[2,132],{104:$VV,116:$V51}),o($Vm1,[2,133],{104:$VV,116:$V51}),o([15,25,30,34,67,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116],[2,134],{104:$VV}),o($V61,[2,115]),{23:[1,263]},{15:[1,264],34:[1,265]},o($V91,[2,81]),o($Vn1,[2,31]),{15:[1,266]},{15:[1,267]},{34:[1,268]},{15:[1,269]},{34:[1,270]},{22:[1,271]},{34:[1,272]},{15:[1,273]},{16:[1,274]},{19:275,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5},o($V91,[2,37],{28:276,35:$Vb}),{21:[1,277]},{15:[1,278]},{15:[1,279],34:$Vf1},{37:[2,25]},o($V8,[2,10]),o($Vc1,[2,54]),o($Vc1,[2,57]),{14:$Vj,23:$Vk,33:280,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:281,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{30:[1,282]},{15:[1,283]},{34:[1,284]},{15:[1,285]},{7:86,8:84,12:91,18:[1,286],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,18:[1,287],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:288,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{14:$Vj,23:$Vk,33:289,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:290,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},o([23,25],$Vd,{41:169,28:170,35:$Vb,39:$V81,42:$Vd1}),{23:$V9,25:$Va,31:23},{15:[1,291]},{15:[1,292]},{34:[1,293]},{15:[1,294]},{34:[1,295]},{34:[1,296]},{34:[1,297]},{15:[1,298]},o($Vh1,[2,104]),{15:[1,300],34:[1,299]},{15:[1,301]},{15:[2,108]},{15:[2,109]},{15:[2,110]},{15:[2,111]},{15:[2,112]},{15:[2,113]},o($VP,[2,17]),o($Vn1,[2,30]),o($V61,[2,79]),{14:$Vj,23:$Vk,33:302,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},o($V61,[2,145]),o($V8,[2,83]),{22:[1,303]},o($V8,[2,85]),{20:[1,304]},{23:[1,305]},{21:[1,306]},o($V8,[2,89]),{7:86,8:84,12:91,17:307,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{23:[1,308],25:$Va},o($V91,[2,38],{35:$Vg}),{38:[1,309]},o($Vg1,[2,95]),{16:[1,310]},{30:[1,311]},{30:[1,312]},o($Vo1,[2,29]),{57:[1,313]},{60:314,63:[1,315],64:[1,316]},{16:[1,317]},{70:[1,318],75:[1,319]},{73:[1,320]},{7:86,8:84,12:91,18:[1,321],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{30:[1,322]},{30:[1,323]},{16:[1,324]},o($Vh1,[2,97]),{81:325,87:$Vp1,88:$Vq1,89:$Vr1},o($Vh1,[2,99]),{14:$Vj,23:$Vk,33:329,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:330,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:331,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},o($Vh1,[2,103]),{14:$Vj,23:$Vk,33:332,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},o($Vh1,[2,106]),{30:[1,333]},o($V91,[2,80]),{81:334,87:$Vp1,88:$Vq1,89:$Vr1},{23:[1,335]},{15:[1,336]},{38:[1,337]},{7:86,8:84,12:91,18:[1,338],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($V91,[2,35],{28:339,35:$Vb}),{15:[1,340]},{7:86,8:84,12:91,17:341,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vo1,[2,27]),o($Vo1,[2,28]),{16:[1,342]},{15:[1,343]},{15:[2,62]},{15:[2,63]},{7:86,8:84,12:91,17:344,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{14:[1,345]},{14:[1,346]},{14:[1,347]},o($Vc1,[2,74]),{14:$Vj,23:$Vk,33:348,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:349,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{7:86,8:84,12:91,17:350,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{34:[1,351]},{34:[2,90]},{34:[2,91]},{34:[2,92]},{15:[1,352]},{15:[1,353]},{15:[1,354]},{15:[1,355]},o($Vc1,[2,107]),{34:[1,356]},{15:[1,357]},o($V8,[2,87]),{15:[1,358]},o($V8,[2,33]),o($V91,[2,36],{35:$Vg}),o($Vg1,[2,94]),{7:86,8:84,12:91,18:[1,359],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:360,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{16:[1,361]},{7:86,8:84,12:91,18:[1,362],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{14:$Vj,23:$Vk,33:363,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:364,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{14:$Vj,23:$Vk,33:365,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},{15:[1,366]},{15:[1,367]},{7:86,8:84,12:91,18:[1,368],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{14:$Vj,23:$Vk,33:369,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},o($Vh1,[2,100]),o($Vh1,[2,101]),o($Vh1,[2,102]),o($Vh1,[2,105]),{21:[1,370]},o($V8,[2,86]),o($V8,[2,88]),o($V8,[2,34]),{7:86,8:84,12:91,18:[1,371],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{61:372,65:[1,373]},o($Vc1,[2,71]),{15:[1,374]},{34:[1,375]},{15:[1,376]},{16:[1,377]},{16:[1,378]},o($Vc1,[2,78]),{15:[1,379]},{38:[1,380]},o($Vc1,[2,58],{58:[1,381]}),{18:[1,382],62:383,65:[1,384],69:[1,385]},{38:$Vs1,66:386,68:$Vt1},o($Vc1,[2,72]),{14:$Vj,23:$Vk,33:389,38:$Vl,51:66,63:$Vm,64:$Vn,67:$Vo,68:$Vp,100:55,117:$Vq,118:$Vr,119:$Vs},o($Vc1,[2,73]),{7:86,8:84,12:91,17:390,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:391,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vh1,[2,98]),{15:[1,392]},{16:[1,393]},o($Vc1,[2,60]),{18:[1,394]},{38:$Vs1,66:395,68:$Vt1},{27:[1,396]},{27:[1,397],67:[1,398]},o($Vu1,[2,68]),o($Vu1,[2,69]),{15:[1,399]},{7:86,8:84,12:91,18:[1,400],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,18:[1,401],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($V8,[2,84]),{7:86,8:84,12:91,17:402,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vc1,[2,61]),{27:[1,403],67:[1,404]},{7:86,8:84,12:91,17:405,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:406,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{38:$Vs1,66:407,68:$Vt1},o($Vc1,[2,75]),o($Vc1,[2,76]),o($Vc1,[2,77]),{7:86,8:84,12:91,18:[1,408],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:409,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{38:$Vs1,66:410,68:$Vt1},{7:86,8:84,12:91,18:[2,70],19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:160,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vv1,[2,65],{8:84,40:85,7:86,46:87,47:88,48:89,49:90,12:91,50:92,51:93,52:94,19:98,45:160,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,43:$V7,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO}),{27:[1,411]},o($Vc1,[2,59]),o($Vv1,[2,64],{8:84,40:85,7:86,46:87,47:88,48:89,49:90,12:91,50:92,51:93,52:94,19:98,45:160,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,43:$V7,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO}),{27:[1,412]},{7:86,8:84,12:91,17:413,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},{7:86,8:84,12:91,17:414,19:98,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,40:85,43:$V7,45:83,46:87,47:88,48:89,49:90,50:92,51:93,52:94,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO},o($Vv1,[2,67],{8:84,40:85,7:86,46:87,47:88,48:89,49:90,12:91,50:92,51:93,52:94,19:98,45:160,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,43:$V7,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO}),o($Vv1,[2,66],{8:84,40:85,7:86,46:87,47:88,48:89,49:90,12:91,50:92,51:93,52:94,19:98,45:160,20:$V1,21:$V2,22:$V3,23:$Vt,24:$V5,26:$V6,43:$V7,53:$Vu,54:$Vv,55:$Vw,56:$Vx,59:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,76:$VD,77:$VE,79:$VF,80:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,90:$VM,91:$VN,92:$VO})],
defaultActions: {19:[2,1],54:[2,19],228:[2,25],256:[2,108],257:[2,109],258:[2,110],259:[2,111],260:[2,112],261:[2,113],315:[2,62],316:[2,63],326:[2,90],327:[2,91],328:[2,92]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Nodo(nombre, token,posicion, hijos){
	this.nombre = nombre;
	this.token = token;
	this.posicion = posicion;
	this.hijos = hijos;	
}

parser.arbol ={
	raiz:null
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return 38
break;
case 4:return 'binario'
break;
case 5:return 'hexadecimal'
break;
case 6:return   'cadena'
break;
case 7:return   'cadenaSimple'
break;
case 8:/*IGNORAR*/;
break;
case 9:/* IGNORAR*/
break;
case 10:return 25
break;
case 11:return 102
break;
case 12:return 67
break;
case 13:return 101
break;
case 14:return 103
break;
case 15:return 105
break;
case 16:return 14
break;
case 17:return 15
break;
case 18:return 106
break;
case 19:return 107
break;
case 20:return 108
break;
case 21:return 109
break;
case 22:return 110
break;
case 23:return 111
break;
case 24:return 114
break;
case 25:return 112
break;
case 26:return 113
break;
case 27:return 115
break;
case 28:return 116
break;
case 29:return 104
break;
case 30:return 16
break;
case 31:return 18
break;
case 32:return 34
break;
case 33:return 39
break;
case 34:return 27
break;
case 35:return 30
break;
case 36:return 35
break;
case 37:return 37
break;
case 38:return 42
break;
case 39:return '..'
break;
case 40:return 20
break;
case 41:return 21
break;
case 42:return 22
break;
case 43:return 118
break;
case 44:return 26
break;
case 45:return 29
break;
case 46:return 43
break;
case 47:return 119
break;
case 48:return 56
break;
case 49:return 57
break;
case 50:return 58
break;
case 51:return 59
break;
case 52:return 65
break;
case 53:return 69
break;
case 54:return 63
break;
case 55:return 64
break;
case 56:return 53
break;
case 57:return 54
break;
case 58:return 55
break;
case 59:return 70
break;
case 60:return 71
break;
case 61:return 72
break;
case 62:return 73
break;
case 63:return 76
break;
case 64:return 74
break;
case 65:return 77
break;
case 66:return 75
break;
case 67:return 24
break;
case 68:return 13
break;
case 69:return 79
break;
case 70:return 80
break;
case 71:return 83
break;
case 72:return 82
break;
case 73:return 84
break;
case 74:return 85
break;
case 75:return 86
break;
case 76:return 90
break;
case 77:return 91
break;
case 78:return 87
break;
case 79:return 88
break;
case 80:return 89
break;
case 81:return 92
break;
case 82:return 94
break;
case 83:return 95
break;
case 84:return 96
break;
case 85:return 97
break;
case 86:return 98
break;
case 87:return 99
break;
case 88:return 23
break;
case 89:return 5
break;
case 90:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:b[01]+(.[01]+)?)/,/^(?:0x[A-Fa-f0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])*')/,/^(?:%%(.)*)/,/^(?:��(\\.|[^"??"])*\?\?)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:&\?)/,/^(?:\|\?)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\.\.)/,/^(?:bool\b)/,/^(?:num\b)/,/^(?:str\b)/,/^(?:NULL\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:element\b)/,/^(?:create\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:void\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outNum\b)/,/^(?:outStr\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:bin\b)/,/^(?:hex\b)/,/^(?:dec\b)/,/^(?:throws\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnException\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:[a-zA-z_0-9-]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}