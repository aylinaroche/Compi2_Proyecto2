/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,10],$V7=[1,12],$V8=[5,13,20,21,22,23,24,26,44],$V9=[1,26],$Va=[1,25],$Vb=[1,27],$Vc=[23,25,27,30,36],$Vd=[2,14],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,42],$Vm=[1,43],$Vn=[1,45],$Vo=[27,30,34],$Vp=[2,28],$Vq=[1,47],$Vr=[1,55],$Vs=[1,59],$Vt=[1,60],$Vu=[1,57],$Vv=[1,58],$Vw=[1,56],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[5,13,14,18,20,21,22,23,24,26,39,44,54,55,56,57,60,64,65,66,68,69,70,71,72,73,75,77,78,80,81,83,84,85,86,87,91,92,93,118,119,120],$VC=[1,85],$VD=[1,84],$VE=[1,83],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[1,99],$VT=[1,100],$VU=[15,25,30,34,68,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],$VV=[1,104],$VW=[1,105],$VX=[15,34],$VY=[2,41],$VZ=[15,27,29,34,36,43],$V_=[1,140],$V$=[1,136],$V01=[1,137],$V11=[1,138],$V21=[1,141],$V31=[1,142],$V41=[1,143],$V51=[1,144],$V61=[1,145],$V71=[1,146],$V81=[1,147],$V91=[1,148],$Va1=[1,149],$Vb1=[1,150],$Vc1=[1,151],$Vd1=[1,152],$Ve1=[1,153],$Vf1=[1,154],$Vg1=[1,155],$Vh1=[1,156],$Vi1=[1,157],$Vj1=[1,158],$Vk1=[1,180],$Vl1=[1,193],$Vm1=[5,13,18,20,21,22,23,24,26,44,54,55,56,57,60,66,70,71,72,73,75,77,78,80,81,83,84,85,86,87,91,92,93],$Vn1=[18,20,21,22,23,24,26,44,54,55,56,57,60,66,70,71,72,73,75,77,78,80,81,83,84,85,86,87,91,92,93],$Vo1=[1,211],$Vp1=[15,30,34,68,102],$Vq1=[15,25,30,34,68,102,103],$Vr1=[15,25,30,34,68,102,103,104,106,107,108,109,110,111,112],$Vs1=[15,25,30,34,68,102,103,104,106,107,108,109,110,111,112,113,114],$Vt1=[15,25,30,34,68,102,103,104,106,107,108,109,110,111,112,113,114,115,116],$Vu1=[15,25,30,34,40,43,68,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],$Vv1=[18,20,21,22,23,24,26,30,44,54,55,56,57,60,66,70,71,72,73,75,77,78,80,81,83,84,85,86,87,91,92,93],$Vw1=[1,313],$Vx1=[1,314],$Vy1=[1,315],$Vz1=[14,18,20,21,22,23,24,26,39,44,54,55,56,57,60,64,65,66,68,69,70,71,72,73,75,77,78,80,81,83,84,85,86,87,91,92,93,118,119,120],$VA1=[1,390],$VB1=[1,389],$VC1=[27,68],$VD1=[18,66,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ENTRADA":4,"EOF":5,"INSTRUCCIONES":6,"VARIABLE":7,"ELEMENTO":8,"PRINCIPAL":9,"CASTEO":10,"METODO":11,"FUNCIONES":12,"Principal":13,"(":14,")":15,"{":16,"INSTRUCCION":17,"}":18,"TIPO":19,"bool":20,"num":21,"str":22,"id":23,"vacio":24,"*":25,"arreglo":26,":":27,"DIMEN":28,"of":29,";":30,"MasVARIABLE":31,"ASIGNAR":32,"OP":33,",":34,"A":35,"[":36,"DIM":37,"]":38,"numero":39,".":40,"ASIGNACION":41,"ACCESO":42,"=":43,"element":44,"PARAMETRO":45,"INST":46,"SI":47,"SWITCH":48,"CICLO":49,"FOR":50,"OTROS":51,"INSTANCIA":52,"THROW":53,"romper":54,"continuar":55,"retornar":56,"si":57,"entonces":58,"sino":59,"interruptor":60,"MODO":61,"CASO":62,"DEFECTO":63,"verdadero":64,"falso":65,"caso":66,"PUNTUAL":67,"-":68,"cadena":69,"defecto":70,"mientras":71,"hacer":72,"repetir":73,"hasta":74,"looop":75,"mientrasX":76,"para":77,"count":78,"VALOR":79,"getBool":80,"getNum":81,"BASE":82,"outStr":83,"outNum":84,"inStr":85,"inNum":86,"show":87,"bin":88,"hex":89,"dec":90,"getRandom":91,"getLength":92,"lanzar":93,"EXCEPCION":94,"NullException":95,"MissingException":96,"AritmeticException":97,"StackException":98,"HeapException":99,"PoolException":100,"E":101,"+":102,"/":103,"^":104,"!":105,"%":106,">":107,"<":108,">=":109,"<=":110,"==":111,"!=":112,"||":113,"|&":114,"&&":115,"&?":116,"|?":117,"cadenaSimple":118,"NULL":119,"create":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"Principal",14:"(",15:")",16:"{",18:"}",20:"bool",21:"num",22:"str",23:"id",24:"vacio",25:"*",26:"arreglo",27:":",29:"of",30:";",34:",",36:"[",38:"]",39:"numero",40:".",43:"=",44:"element",54:"romper",55:"continuar",56:"retornar",57:"si",58:"entonces",59:"sino",60:"interruptor",64:"verdadero",65:"falso",66:"caso",68:"-",69:"cadena",70:"defecto",71:"mientras",72:"hacer",73:"repetir",74:"hasta",75:"looop",76:"mientrasX",77:"para",78:"count",80:"getBool",81:"getNum",83:"outStr",84:"outNum",85:"inStr",86:"inNum",87:"show",88:"bin",89:"hex",90:"dec",91:"getRandom",92:"getLength",93:"lanzar",95:"NullException",96:"MissingException",97:"AritmeticException",98:"StackException",99:"HeapException",100:"PoolException",102:"+",103:"/",104:"^",105:"!",106:"%",107:">",108:"<",109:">=",110:"<=",111:"==",112:"!=",113:"||",114:"|&",115:"&&",116:"&?",117:"|?",118:"cadenaSimple",119:"NULL",120:"create"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,6],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[7,7],[7,4],[32,2],[32,0],[31,3],[31,1],[35,2],[28,4],[28,3],[37,4],[37,1],[37,0],[41,5],[41,5],[41,4],[42,3],[42,2],[8,6],[11,9],[11,10],[45,4],[45,5],[45,2],[45,3],[45,0],[17,2],[17,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[46,1],[46,2],[46,3],[46,2],[46,2],[46,3],[47,8],[47,12],[48,9],[48,10],[61,1],[61,1],[62,5],[62,4],[62,7],[62,6],[67,1],[67,1],[63,3],[49,7],[49,8],[49,8],[49,5],[49,10],[50,10],[50,10],[50,7],[52,4],[79,3],[79,1],[79,0],[10,7],[10,13],[10,7],[10,10],[10,9],[10,10],[10,7],[82,1],[82,1],[82,1],[12,5],[12,9],[12,7],[51,2],[51,4],[51,8],[51,4],[51,6],[51,6],[51,6],[51,4],[51,3],[51,6],[51,4],[53,5],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[33,1],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,2],[101,2],[101,2],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,1],[101,1],[101,3],[101,3],[101,2],[101,1],[101,1],[101,1],[101,1],[101,1],[101,4],[101,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:

//alert('Variable');

break;
case 25:
 console.log("DIMEN2"); 
break;
case 27:
 console.log("dim2"); 
break;
case 117:
 console.log("Expresion"); 
break;
case 149:
 console.log("Inst"); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,19:11,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,26:$V6,44:$V7},{1:[3]},{5:[1,19],6:20,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,19:11,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5,26:$V6,44:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),{27:[1,21]},{23:$V9,25:$Va,27:[1,23],28:24,31:22,36:$Vb},{27:[1,28]},{14:[1,29]},o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,$Vd),o($Vc,[2,15]),{1:[2,1]},o($V8,[2,2]),{23:[1,30]},{27:[1,33],30:[2,20],32:31,34:[1,32]},{23:[1,41],80:$Ve,81:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,91:$Vl,92:$Vm},{27:[1,44],36:$Vn},o($Vc,[2,16]),o($Vo,[2,22]),{37:46,38:$Vp,39:$Vq},{23:[1,48]},{15:[1,49]},{28:50,36:$Vb},{30:[1,51]},{23:[1,52]},{14:$Vr,23:$Vs,33:53,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:[1,66]},{14:[1,67]},{14:[1,68]},{14:[1,69]},{14:[1,70]},{14:[1,71]},{14:[1,72]},{14:[1,73]},{14:[1,74]},{14:[1,75]},{23:[1,76]},{37:77,38:$Vp,39:$Vq},{38:[1,78]},{38:[2,27],40:[1,79]},{16:[1,80]},{16:[1,81]},{29:[1,82],36:$Vn},o($VB,[2,18]),o($Vo,[2,21]),{30:[2,19]},o([15,30,34],[2,117],{25:$VC,68:$VD,102:$VE,103:$VF,104:$VG,105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:101,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:102,118:$Vy,119:$Vz,120:$VA},o($VU,[2,138]),o($VU,[2,139]),o($VU,[2,144],{42:103,14:$VV,40:$VW}),o($VU,[2,143]),o($VU,[2,145]),o($VU,[2,146]),o($VU,[2,147]),{14:[1,106]},o($VU,[2,149]),{22:[1,107]},{22:[1,108]},{22:[1,109]},{21:[1,110]},{23:[1,111]},{22:[1,112]},{22:[1,113]},o($VX,$VY,{45:114,19:115,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5}),{15:[1,116]},{22:[1,118],23:[1,117]},{14:[1,119]},{38:[1,120]},o($VZ,[2,25]),{40:[1,121]},{7:124,8:126,10:131,12:132,17:122,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:159,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{19:160,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:161,102:[1,162],118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:[1,164],69:$Vx,101:163,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:165,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:166,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:167,118:$Vy,119:$Vz,120:$VA},o($VU,[2,124]),o($VU,[2,125]),{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:168,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:169,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:170,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:171,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:172,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:173,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:174,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:175,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:176,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:177,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:178,118:$Vy,119:$Vz,120:$VA},{15:[1,179],25:$VC,68:$VD,102:$VE,103:$VF,104:$VG,105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT},o([15,25,30,34,68,102,103,104,106],[2,126],{105:$VH,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($VU,[2,142],{40:$Vk1}),o($VX,[2,85],{101:54,52:65,79:181,33:182,14:$Vr,23:$Vs,39:$Vt,64:$Vu,65:$Vv,68:$Vw,69:$Vx,118:$Vy,119:$Vz,120:$VA}),{23:[1,183]},{23:[1,184]},{23:[1,185]},{23:[1,186]},{23:[1,187]},{23:[1,188]},{34:[1,189]},{23:[1,190]},{23:[1,191]},{15:[1,192],34:$Vl1},{23:[1,194],25:$Va},o($Vm1,[2,96]),{34:[1,195]},{23:[1,196]},o($VX,$VY,{19:115,45:197,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5}),o($VZ,[2,24]),{39:[1,198]},{7:124,8:126,10:131,12:132,18:[1,199],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($Vn1,[2,43]),o($Vn1,[2,44]),o($Vn1,[2,45]),o($Vn1,[2,46]),o($Vn1,[2,47]),o($Vn1,[2,48]),o($Vn1,[2,49]),o($Vn1,[2,50]),o($Vn1,[2,51]),o($Vn1,[2,52]),o($Vn1,[2,53],{30:[1,201]}),{30:[1,202]},o($Vn1,[2,55]),{14:$Vr,23:$Vs,30:[1,203],33:204,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{30:[1,205]},{14:$Vr,23:$Vs,30:[1,206],33:207,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{23:$V9,25:$Va,27:[1,208],31:22},o([23,25,27],$Vd,{42:209,28:210,14:$VV,36:$Vb,40:$VW,43:$Vo1}),{14:[1,212]},{14:[1,213]},{14:[1,214]},{16:[1,215]},{16:[1,216]},{23:[1,217]},{14:[1,218]},{14:[1,219]},{14:[1,220]},{14:[1,221]},{14:[1,222]},{14:[1,223]},{14:[1,224]},{14:[1,225]},{14:[1,226]},{14:[1,227]},{14:[1,228]},{14:[1,229]},{7:124,8:126,10:131,12:132,18:[1,230],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{25:$Va,30:[1,231]},o($Vp1,[2,119],{25:$VC,103:$VF,104:$VG,105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($VU,[2,140]),o($Vp1,[2,120],{25:$VC,103:$VF,104:$VG,105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($VU,[2,141],{52:65,101:102,14:$Vr,23:$Vs,39:$Vt,64:$Vu,65:$Vv,69:$Vx,118:$Vy,119:$Vz,120:$VA}),o($Vq1,[2,121],{104:$VG,105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vq1,[2,122],{104:$VG,105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o([15,25,30,34,68,102,103,104],[2,123],{105:$VH,106:$VI,107:$VJ,108:$VK,109:$VL,110:$VM,111:$VN,112:$VO,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vr1,[2,127],{105:$VH,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vr1,[2,128],{105:$VH,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vr1,[2,129],{105:$VH,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vr1,[2,130],{105:$VH,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vr1,[2,131],{105:$VH,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vr1,[2,132],{105:$VH,113:$VP,114:$VQ,115:$VR,116:$VS,117:$VT}),o($Vs1,[2,133],{105:$VH,115:$VR,116:$VS,117:$VT}),o($Vs1,[2,134],{105:$VH,115:$VR,116:$VS,117:$VT}),o($Vt1,[2,135],{105:$VH,117:$VT}),o($Vt1,[2,136],{105:$VH,117:$VT}),o([15,25,30,34,68,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117],[2,137],{105:$VH}),o($VU,[2,118]),{23:[1,232]},{15:[1,233],34:[1,234]},o($VX,[2,84]),o($Vu1,[2,33]),{15:[1,235]},{15:[1,236]},{34:[1,237]},{15:[1,238]},{34:[1,239]},{22:[1,240]},{34:[1,241]},{15:[1,242]},{16:[1,243]},{19:244,20:$V1,21:$V2,22:$V3,23:$V4,24:$V5},o($VX,[2,39],{28:245,36:$Vb}),{21:[1,246]},{15:[1,247]},{15:[1,248],34:$Vl1},{38:[2,26]},o($Vm1,[2,34]),o($Vn1,[2,42]),o($Vv1,[2,99]),o($Vn1,[2,54]),o($Vn1,[2,56]),{30:[1,249]},o($Vn1,[2,58]),o($Vn1,[2,59]),{30:[1,250]},{80:$Ve,81:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,91:$Vl,92:$Vm},{40:$Vk1,43:[1,251]},{36:$Vn,43:[1,252]},{14:$Vr,23:$Vs,33:253,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:254,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:255,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:256,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{7:124,8:126,10:131,12:132,17:257,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:258,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{16:[1,259]},{7:261,19:263,20:$V1,21:$V2,22:$V3,23:[1,262],24:$V5,26:$V6,41:260},{14:$Vr,23:$Vs,33:264,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:265,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:266,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:267,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:268,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:269,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:270,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:271,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{15:[1,272]},{14:$Vr,23:$Vs,33:273,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{94:274,95:[1,275],96:[1,276],97:[1,277],98:[1,278],99:[1,279],100:[1,280]},o($V8,[2,10]),o($VB,[2,17]),o($Vu1,[2,32]),o($VU,[2,82]),{14:$Vr,23:$Vs,33:281,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},o($VU,[2,148]),o($Vm1,[2,86]),{22:[1,282]},o($Vm1,[2,88]),{20:[1,283]},{23:[1,284]},{21:[1,285]},o($Vm1,[2,92]),{7:124,8:126,10:131,12:132,17:286,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{23:[1,287],25:$Va},o($VX,[2,40],{36:$Vn}),{39:[1,288]},o($Vm1,[2,98]),{16:[1,289]},o($Vn1,[2,57]),o($Vn1,[2,60]),{14:$Vr,23:$Vs,33:290,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:291,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{30:[1,292]},{15:[1,293]},{34:[1,294]},{15:[1,295]},{7:124,8:126,10:131,12:132,18:[1,296],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,18:[1,297],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:298,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{14:$Vr,23:$Vs,33:299,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:300,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},o([23,25],$Vd,{42:209,28:210,36:$Vb,40:$VW,43:$Vo1}),{23:$V9,25:$Va,31:22},{15:[1,301]},{15:[1,302]},{34:[1,303]},{15:[1,304]},{34:[1,305]},{34:[1,306]},{34:[1,307]},{15:[1,308]},o($Vv1,[2,107]),{15:[1,310],34:[1,309]},{15:[1,311]},{15:[2,111]},{15:[2,112]},{15:[2,113]},{15:[2,114]},{15:[2,115]},{15:[2,116]},o($VX,[2,83]),{82:312,88:$Vw1,89:$Vx1,90:$Vy1},{23:[1,316]},{15:[1,317]},{39:[1,318]},{7:124,8:126,10:131,12:132,18:[1,319],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($VX,[2,37],{28:320,36:$Vb}),{15:[1,321]},{7:124,8:126,10:131,12:132,17:322,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{30:[1,323]},{30:[1,324]},o($Vz1,[2,31]),{58:[1,325]},{61:326,64:[1,327],65:[1,328]},{16:[1,329]},{71:[1,330],76:[1,331]},{74:[1,332]},{7:124,8:126,10:131,12:132,18:[1,333],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{30:[1,334]},{30:[1,335]},{16:[1,336]},o($Vv1,[2,100]),{82:337,88:$Vw1,89:$Vx1,90:$Vy1},o($Vv1,[2,102]),{14:$Vr,23:$Vs,33:338,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:339,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:340,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},o($Vv1,[2,106]),{14:$Vr,23:$Vs,33:341,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},o($Vv1,[2,109]),{30:[1,342]},{34:[1,343]},{34:[2,93]},{34:[2,94]},{34:[2,95]},{15:[1,344]},o($Vm1,[2,90]),{15:[1,345]},o($V8,[2,35]),o($VX,[2,38],{36:$Vn}),o($Vm1,[2,97]),{7:124,8:126,10:131,12:132,18:[1,346],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($Vz1,[2,29]),o($Vz1,[2,30]),{16:[1,347]},{15:[1,348]},{15:[2,65]},{15:[2,66]},{7:124,8:126,10:131,12:132,17:349,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{14:[1,350]},{14:[1,351]},{14:[1,352]},o($Vn1,[2,77]),{14:$Vr,23:$Vs,33:353,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:354,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{7:124,8:126,10:131,12:132,17:355,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{34:[1,356]},{15:[1,357]},{15:[1,358]},{15:[1,359]},{15:[1,360]},o($Vn1,[2,110]),{21:[1,361]},o($Vm1,[2,89]),o($Vm1,[2,91]),o($V8,[2,36]),{7:124,8:126,10:131,12:132,17:362,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{16:[1,363]},{7:124,8:126,10:131,12:132,18:[1,364],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{14:$Vr,23:$Vs,33:365,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:366,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{14:$Vr,23:$Vs,33:367,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},{15:[1,368]},{15:[1,369]},{7:124,8:126,10:131,12:132,18:[1,370],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{14:$Vr,23:$Vs,33:371,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},o($Vv1,[2,103]),o($Vv1,[2,104]),o($Vv1,[2,105]),o($Vv1,[2,108]),{39:[1,372]},{7:124,8:126,10:131,12:132,18:[1,373],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{62:374,66:[1,375]},o($Vn1,[2,74]),{15:[1,376]},{34:[1,377]},{15:[1,378]},{16:[1,379]},{16:[1,380]},o($Vn1,[2,81]),{15:[1,381]},{15:[1,382]},o($Vn1,[2,61],{59:[1,383]}),{18:[1,384],63:385,66:[1,386],70:[1,387]},{39:$VA1,67:388,69:$VB1},o($Vn1,[2,75]),{14:$Vr,23:$Vs,33:391,39:$Vt,52:65,64:$Vu,65:$Vv,68:$Vw,69:$Vx,101:54,118:$Vy,119:$Vz,120:$VA},o($Vn1,[2,76]),{7:124,8:126,10:131,12:132,17:392,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:393,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($Vv1,[2,101]),o($Vm1,[2,87]),{16:[1,394]},o($Vn1,[2,63]),{18:[1,395]},{39:$VA1,67:396,69:$VB1},{27:[1,397]},{27:[1,398],68:[1,399]},o($VC1,[2,71]),o($VC1,[2,72]),{15:[1,400]},{7:124,8:126,10:131,12:132,18:[1,401],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,18:[1,402],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:403,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($Vn1,[2,64]),{27:[1,404],68:[1,405]},{7:124,8:126,10:131,12:132,17:406,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:407,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{39:$VA1,67:408,69:$VB1},o($Vn1,[2,78]),o($Vn1,[2,79]),o($Vn1,[2,80]),{7:124,8:126,10:131,12:132,18:[1,409],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:410,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{39:$VA1,67:411,69:$VB1},{7:124,8:126,10:131,12:132,18:[2,73],19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:200,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($VD1,[2,68],{7:124,41:125,8:126,47:127,48:128,49:129,50:130,10:131,12:132,51:133,52:134,53:135,19:139,46:200,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,44:$V7,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1}),{27:[1,412]},o($Vn1,[2,62]),o($VD1,[2,67],{7:124,41:125,8:126,47:127,48:128,49:129,50:130,10:131,12:132,51:133,52:134,53:135,19:139,46:200,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,44:$V7,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1}),{27:[1,413]},{7:124,8:126,10:131,12:132,17:414,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},{7:124,8:126,10:131,12:132,17:415,19:139,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,41:125,44:$V7,46:123,47:127,48:128,49:129,50:130,51:133,52:134,53:135,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1},o($VD1,[2,70],{7:124,41:125,8:126,47:127,48:128,49:129,50:130,10:131,12:132,51:133,52:134,53:135,19:139,46:200,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,44:$V7,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1}),o($VD1,[2,69],{7:124,41:125,8:126,47:127,48:128,49:129,50:130,10:131,12:132,51:133,52:134,53:135,19:139,46:200,20:$V1,21:$V2,22:$V3,23:$V_,24:$V5,26:$V6,44:$V7,54:$V$,55:$V01,56:$V11,57:$V21,60:$V31,71:$V41,72:$V51,73:$V61,75:$V71,77:$V81,78:$V91,80:$Va1,81:$Vb1,83:$Vc1,84:$Vd1,85:$Ve1,86:$Vf1,87:$Vg1,91:$Vh1,92:$Vi1,93:$Vj1})],
defaultActions: {19:[2,1],53:[2,19],198:[2,26],275:[2,111],276:[2,112],277:[2,113],278:[2,114],279:[2,115],280:[2,116],313:[2,93],314:[2,94],315:[2,95],327:[2,65],328:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:return 39
break;
case 3:return 'binario'
break;
case 4:return 'hexadecimal'
break;
case 5:return   'cadena'
break;
case 6:return   'cadenaSimple'
break;
case 7:/*IGNORAR*/;
break;
case 8:/* IGNORAR*/
break;
case 9:return 25
break;
case 10:return 103
break;
case 11:return 68
break;
case 12:return 102
break;
case 13:return 104
break;
case 14:return 106
break;
case 15:return 14
break;
case 16:return 15
break;
case 17:return 107
break;
case 18:return 108
break;
case 19:return 109
break;
case 20:return 110
break;
case 21:return 111
break;
case 22:return 112
break;
case 23:return 115
break;
case 24:return 113
break;
case 25:return 114
break;
case 26:return 116
break;
case 27:return 117
break;
case 28:return 105
break;
case 29:return 16
break;
case 30:return 18
break;
case 31:return 34
break;
case 32:return 40
break;
case 33:return 27
break;
case 34:return 30
break;
case 35:return 36
break;
case 36:return 38
break;
case 37:return 43
break;
case 38:return '..'
break;
case 39:return 20
break;
case 40:return 21
break;
case 41:return 22
break;
case 42:return 119
break;
case 43:return 26
break;
case 44:return 29
break;
case 45:return 44
break;
case 46:return 120
break;
case 47:return 57
break;
case 48:return 58
break;
case 49:return 59
break;
case 50:return 60
break;
case 51:return 66
break;
case 52:return 70
break;
case 53:return 64
break;
case 54:return 65
break;
case 55:return 54
break;
case 56:return 55
break;
case 57:return 56
break;
case 58:return 71
break;
case 59:return 72
break;
case 60:return 73
break;
case 61:return 74
break;
case 62:return 77
break;
case 63:return 75
break;
case 64:return 78
break;
case 65:return 76
break;
case 66:return 24
break;
case 67:return 13
break;
case 68:return 80
break;
case 69:return 81
break;
case 70:return 84
break;
case 71:return 83
break;
case 72:return 85
break;
case 73:return 86
break;
case 74:return 87
break;
case 75:return 91
break;
case 76:return 92
break;
case 77:return 88
break;
case 78:return 89
break;
case 79:return 90
break;
case 80:return 93
break;
case 81:return 95
break;
case 82:return 96
break;
case 83:return 97
break;
case 84:return 98
break;
case 85:return 99
break;
case 86:return 100
break;
case 87:return 23
break;
case 88:return 5
break;
case 89:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\t+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:b[01]+(.[01]+)?)/,/^(?:0x[A-Fa-f0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])*')/,/^(?:%%(.)*)/,/^(?:��(\\.|[^"??"])*\?\?)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:&\?)/,/^(?:\|\?)/,/^(?:!)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:\.\.)/,/^(?:bool\b)/,/^(?:num\b)/,/^(?:str\b)/,/^(?:NULL\b)/,/^(?:array\b)/,/^(?:of\b)/,/^(?:element\b)/,/^(?:create\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:for\b)/,/^(?:loop\b)/,/^(?:count\b)/,/^(?:whilex\b)/,/^(?:void\b)/,/^(?:Principal\b)/,/^(?:getBool\b)/,/^(?:getNum\b)/,/^(?:outNum\b)/,/^(?:outStr\b)/,/^(?:inStr\b)/,/^(?:inNum\b)/,/^(?:show\b)/,/^(?:getRandom\b)/,/^(?:getLength\b)/,/^(?:bin\b)/,/^(?:hex\b)/,/^(?:dec\b)/,/^(?:throws\b)/,/^(?:NullPointerException\b)/,/^(?:MissingReturnException\b)/,/^(?:ArithmeticException\b)/,/^(?:StackOverFlowException\b)/,/^(?:HeapOverFlowException\b)/,/^(?:PoolOverFlowException\b)/,/^(?:[a-zA-z_0-9-]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}